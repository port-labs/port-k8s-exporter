name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
        cache: true

    - name: Build
      run: go build -v ./...

    - name: Clean Test Cache
      run: go clean -testcache

    - name: Test
      run: go run gotest.tools/gotestsum@latest -f github-actions --junitfile ./test-results/junit.xml --format-hide-empty-pkg --junitfile-hide-empty-pkg -- -test.coverprofile=cover.out -p=1 ./...
      env:
        PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
        PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        PORT_BASE_URL: ${{ secrets.PORT_BASE_URL }}

    - name: Merge coverage reports
      run: |
        go tool cover -func=cover.out > coverage.txt
        go tool cover -html=cover.out -o coverage.html
    - name: Upload coverage report
      id: upload-coverage
      uses: actions/upload-artifact@v4
      with:
        path: 'coverage.html'
        name: 'coverage-html'
    - name: Get PR_NUMBER
      id: pr-number
      run: |
        if [ ! -z ${{ inputs.PR_NUMBER }} ]; then
          echo "PR_NUMBER=${{ inputs.PR_NUMBER }}" >> $GITHUB_OUTPUT
        elif [ ! -z ${{ github.event.pull_request.number }} ]; then
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        else
          echo "PR_NUMBER=0" >> $GITHUB_OUTPUT
        fi
    - name: Set repo code coverage percentage by the percentage of statements covered in the tests
      id: set-stmts-coverage
      run: |
        stmts=$(tail -n1 coverage.txt | awk '{print $3}' | sed 's/%//')
        if [ -z "$stmts" ]; then
          echo "STMTS_COVERAGE=0" >> $GITHUB_OUTPUT
        else
          echo "STMTS_COVERAGE=$stmts" >> $GITHUB_OUTPUT
        fi
    - name: Comment PR with code coverage summary
      if: ${{ (steps.pr-number.outputs.PR_NUMBER != 0) }}
      uses: actions/github-script@v7
      env:
        CODE_COVERAGE_ARTIFACT_URL: ${{ steps.upload-coverage.outputs.artifact-url }}
        PR_NUMBER: ${{ steps.pr-number.outputs.PR_NUMBER }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Code Coverage Artifact ðŸ“ˆ: ${{ env.CODE_COVERAGE_ARTIFACT_URL }}
          #### Code Coverage Total Percentage: \`${{ steps.set-stmts-coverage.outputs.STMTS_COVERAGE }}%\``;
          github.rest.issues.createComment({
            issue_number: ${{ env.PR_NUMBER }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Get current repo coverage percentage from Port
      uses: port-labs/port-github-action@v1
      id: get-current-coverage
      with:
        clientId: ${{ secrets.PORT_MAIN_CLIENT_ID }}
        clientSecret: ${{ secrets.PORT_MAIN_CLIENT_SECRET }}
        baseUrl: https://api.getport.io
        operation: GET
        identifier: port-k8s-exporter
        blueprint: repository
    - name: Set current code coverage
      id: set-current-coverage
      run: echo "CURRENT_COVERAGE=${{ fromJson(steps.get-current-coverage.outputs.entity).properties.coverage_percent }}" >> $GITHUB_OUTPUT
    - name: Comment if Coverage Regression
      if: ${{ (fromJson(steps.set-stmts-coverage.outputs.STMTS_COVERAGE) < fromJson(steps.set-current-coverage.outputs.CURRENT_COVERAGE)) && (steps.pr-number.outputs.PR_NUMBER != 0) }}
      uses: actions/github-script@v7
      env:
        PR_NUMBER: ${{ steps.pr-number.outputs.PR_NUMBER }}
        CURRENT_COVERAGE: ${{ steps.set-current-coverage.outputs.CURRENT_COVERAGE }}
        NEW_COVERAGE: ${{ steps.set-stmts-coverage.outputs.STMTS_COVERAGE }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `ðŸš¨ The new code coverage percentage is lower than the current one. Current coverage: \`${{ env.CURRENT_COVERAGE }}\`\n While the new one is: \`${{ env.NEW_COVERAGE }}\``;
          github.rest.issues.createComment({
            issue_number: ${{ env.PR_NUMBER }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Calculate minimum required coverage with tolerance
      run: |
        STMT_COVERAGE=${{ steps.set-stmts-coverage.outputs.STMTS_COVERAGE }}
        THRESHOLD_DELTA=${{ vars.COVERAGE_THRESHOLD_DELTA }}
        MIN_REQUIRED=$(echo "$STMT_COVERAGE + $THRESHOLD_DELTA" | bc)
        echo "MIN_REQUIRED_COVERAGE=$MIN_REQUIRED" >> $GITHUB_ENV
    - name: Fail PR if current code coverage percentage is higher than the new one
      if: ${{ (fromJson(env.MIN_REQUIRED_COVERAGE) < fromJson(steps.set-current-coverage.outputs.CURRENT_COVERAGE)) && (vars.CODE_COVERAGE_ENFORCEMENT == 'true') }}
      run: exit 1
    - name: Update service code coverage percentage in Port
      if: ${{ (github.event_name == 'push') }}
      uses: port-labs/port-github-action@v1
      with:
        clientId: ${{ secrets.PORT_MAIN_CLIENT_ID }}
        clientSecret: ${{ secrets.PORT_MAIN_CLIENT_SECRET }}
        baseUrl: https://api.getport.io
        operation: UPSERT
        identifier: port-k8s-exporter
        blueprint: repository
        properties: |-
          {
            "coverage_percent": "${{ steps.set-stmts-coverage.outputs.STMTS_COVERAGE }}"
          }

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v4
      if: ${{ always() }}
      with:
        report_paths: './test-results/junit.xml'
        include_passed: true
        require_tests: true
        fail_on_failure: true
